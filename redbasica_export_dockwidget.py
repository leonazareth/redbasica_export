# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RedBasicaExportDockWidget
                                 A QGIS plugin
 Export the sewer network designed using RedBasica to other formats
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-08-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Leonardo Nazareth
        email                : leonazareth@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from typing import Optional

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, QTimer
from qgis.PyQt.QtWidgets import QMessageBox, QFileDialog
from qgis.core import (
    QgsProject, QgsVectorLayer, QgsWkbTypes, QgsMapLayerProxyModel,
    Qgis, QgsMessageLog
)
from qgis.gui import QgsMapLayerComboBox

from .core.layer_manager import LayerManager
from .core.data_structures import GeometryType
from .core.template_manager import TemplateManager
from .core.dxf_exporter import DXFExporter
from .core.configuration import Configuration, ExportConfiguration
from .ui.main_export_dialog import MainExportDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'redbasica_export_dockwidget_base.ui'))


class RedBasicaExportDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    """
    Enhanced dockwidget for sewerage network export with integrated controls.
    
    Features:
    - Layer selection shortcuts
    - Quick export options
    - Progress reporting
    - Status updates
    """

    closingPlugin = pyqtSignal()

    def __init__(self, layer_manager: LayerManager, template_manager: TemplateManager, 
                 dxf_exporter: DXFExporter, parent=None):
        """
        Constructor.
        
        Args:
            layer_manager: LayerManager instance
            template_manager: TemplateManager instance
            dxf_exporter: DXFExporter instance
            parent: Parent widget
        """
        super(RedBasicaExportDockWidget, self).__init__(parent)
        
        # Set up the user interface from Designer
        self.setupUi(self)
        
        # Store core components
        self.layer_manager = layer_manager
        self.template_manager = template_manager
        self.dxf_exporter = dxf_exporter
        self.configuration = Configuration()
        
        # Main export dialog
        self.main_export_dialog = None
        
        # Current export configuration
        self.current_config = None
        
        # Setup UI components
        self._setup_ui()
        self._connect_signals()
        self._update_layer_info()
        
        # Timer for delayed updates
        self.update_timer = QTimer()
        self.update_timer.setSingleShot(True)
        self.update_timer.timeout.connect(self._update_layer_info)

    def _setup_ui(self):
        """Set up UI components and layer filtering."""
        # Configure layer combo boxes with geometry filtering
        self.pipesLayerCombo.setFilters(QgsMapLayerProxyModel.LineLayer)
        self.pipesLayerCombo.setAllowEmptyLayer(True)
        self.pipesLayerCombo.setShowCrs(True)
        
        self.junctionsLayerCombo.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.junctionsLayerCombo.setAllowEmptyLayer(True)
        self.junctionsLayerCombo.setShowCrs(True)
        
        # Set initial status
        self.statusLabel.setText("Ready - Select layers to begin")
        
        # Load last used layers if available
        self._load_last_layer_selection()

    def _connect_signals(self):
        """Connect UI signals to handlers."""
        # Layer selection changes
        self.pipesLayerCombo.layerChanged.connect(self._on_layer_changed)
        self.junctionsLayerCombo.layerChanged.connect(self._on_layer_changed)
        
        # Button clicks
        self.openExportDialogButton.clicked.connect(self._open_export_dialog)
        self.quickExportButton.clicked.connect(self._quick_export)

    def _on_layer_changed(self):
        """Handle layer selection changes."""
        # Delay update to avoid multiple rapid calls
        self.update_timer.start(500)
        
        # Save layer selection
        self._save_layer_selection()
        
        # Update quick export button state
        self._update_quick_export_button()

    def _update_layer_info(self):
        """Update layer information display."""
        pipes_layer = self.pipesLayerCombo.currentLayer()
        junctions_layer = self.junctionsLayerCombo.currentLayer()
        
        info_lines = []
        
        if pipes_layer:
            pipe_count = pipes_layer.featureCount()
            field_count = len(pipes_layer.fields())
            info_lines.append(f"<b>Pipes:</b> {pipes_layer.name()}")
            info_lines.append(f"  • {pipe_count} features, {field_count} fields")
            
            # Check geometry type
            if pipes_layer.geometryType() != QgsWkbTypes.LineGeometry:
                info_lines.append(f"  • <span style='color: red;'>⚠ Not a line layer</span>")
        
        if junctions_layer:
            junction_count = junctions_layer.featureCount()
            field_count = len(junctions_layer.fields())
            info_lines.append(f"<b>Junctions:</b> {junctions_layer.name()}")
            info_lines.append(f"  • {junction_count} features, {field_count} fields")
            
            # Check geometry type
            if junctions_layer.geometryType() != QgsWkbTypes.PointGeometry:
                info_lines.append(f"  • <span style='color: red;'>⚠ Not a point layer</span>")
        
        if not pipes_layer and not junctions_layer:
            info_lines.append("<span style='color: #666666;'>Select layers to see information</span>")
        
        self.layerInfoText.setHtml("<br>".join(info_lines))

    def _update_quick_export_button(self):
        """Update quick export button state based on available configuration."""
        # Check if we have a saved configuration and at least one layer selected
        has_config = self.configuration.has_export_configuration()
        has_layers = (self.pipesLayerCombo.currentLayer() is not None or 
                     self.junctionsLayerCombo.currentLayer() is not None)
        
        self.quickExportButton.setEnabled(has_config and has_layers)
        
        if has_config and has_layers:
            self.quickExportButton.setToolTip("Export with last used settings")
        elif not has_config:
            self.quickExportButton.setToolTip("No saved export configuration available")
        else:
            self.quickExportButton.setToolTip("Select at least one layer to enable quick export")

    def _open_export_dialog(self):
        """Open the main export configuration dialog."""
        try:
            # Create dialog if needed
            if not self.main_export_dialog:
                self.main_export_dialog = MainExportDialog(
                    layer_manager=self.layer_manager,
                    parent=self
                )
                self.main_export_dialog.export_requested.connect(self._handle_export_request)
            
            # Pre-select layers from dockwidget
            pipes_layer = self.pipesLayerCombo.currentLayer()
            junctions_layer = self.junctionsLayerCombo.currentLayer()
            
            if pipes_layer:
                self.main_export_dialog.pipesLayerCombo.setLayer(pipes_layer)
            if junctions_layer:
                self.main_export_dialog.junctionsLayerCombo.setLayer(junctions_layer)
            
            # Show dialog
            self.main_export_dialog.show()
            self.main_export_dialog.raise_()
            self.main_export_dialog.activateWindow()
            
        except Exception as e:
            QgsMessageLog.logMessage(f"Failed to open export dialog: {e}", "RedBasica Export", Qgis.Critical)
            QMessageBox.critical(self, "Dialog Error", f"Failed to open export dialog:\n{str(e)}")

    def _quick_export(self):
        """Perform quick export with last used settings."""
        try:
            # Load last configuration
            print(f"DEBUG: Quick export - loading configuration")
            config = self.configuration.load_export_configuration()
            print(f"DEBUG: Quick export - loaded config: {config}")
            if config:
                print(f"DEBUG: Quick export - config.pipes_mapping: {config.pipes_mapping}")
                print(f"DEBUG: Quick export - config.junctions_mapping: {config.junctions_mapping}")
            
            if not config:
                QMessageBox.warning(
                    self, "No Configuration",
                    "No saved export configuration found. Please use 'Configure Export...' first."
                )
                return
            
            # Update layer selections from current dockwidget state
            pipes_layer = self.pipesLayerCombo.currentLayer()
            junctions_layer = self.junctionsLayerCombo.currentLayer()
            
            print(f"DEBUG: Quick export - pipes_layer: {pipes_layer}")
            print(f"DEBUG: Quick export - junctions_layer: {junctions_layer}")
            
            # Safety check: if config doesn't have mappings but we have layers, skip quick export
            if pipes_layer and not config.pipes_mapping:
                print(f"DEBUG: Quick export - pipes layer selected but no pipes_mapping in config")
                QMessageBox.warning(
                    self, "Configuration Error",
                    "Configuration is incomplete. Please use 'Configure Export...' to set up field mappings."
                )
                return
            
            if junctions_layer and not config.junctions_mapping:
                print(f"DEBUG: Quick export - junctions layer selected but no junctions_mapping in config")
                QMessageBox.warning(
                    self, "Configuration Error", 
                    "Configuration is incomplete. Please use 'Configure Export...' to set up field mappings."
                )
                return
            
            if pipes_layer and config.pipes_mapping:
                config.pipes_mapping.layer_id = pipes_layer.id()
                config.pipes_mapping.layer_name = pipes_layer.name()
            
            if junctions_layer and config.junctions_mapping:
                config.junctions_mapping.layer_id = junctions_layer.id()
                config.junctions_mapping.layer_name = junctions_layer.name()
            
            # Validate configuration
            if not pipes_layer and not junctions_layer:
                QMessageBox.warning(
                    self, "No Layers Selected",
                    "Please select at least one layer (pipes or junctions) for export."
                )
                return
            
            # Prompt for output file
            last_output = self.configuration.get_setting('last_output_path', '')
            if last_output:
                default_path = last_output
            else:
                project = QgsProject.instance()
                if project.fileName():
                    default_path = os.path.splitext(project.fileName())[0] + "_export.dxf"
                else:
                    default_path = os.path.expanduser("~/sewerage_export.dxf")
            
            output_path, _ = QFileDialog.getSaveFileName(
                self, "Quick Export - Save DXF File",
                default_path, "DXF Files (*.dxf);;All Files (*)"
            )
            
            if not output_path:
                return  # User cancelled
            
            config.output_path = output_path
            
            # Perform export
            config_dict = self.configuration._export_config_to_dict(config)
            self._handle_export_request(config_dict)
            
        except Exception as e:
            QgsMessageLog.logMessage(f"Quick export failed: {e}", "RedBasica Export", Qgis.Critical)
            QMessageBox.critical(self, "Export Error", f"Quick export failed:\n{str(e)}")

    def _handle_export_request(self, config_dict):
        """
        Handle export request and show progress.
        
        Args:
            config_dict: Dictionary containing export configuration
        """
        try:
            # Convert dict back to ExportConfiguration
            config = self.configuration._dict_to_export_config(config_dict)
            
            # Update status and show progress
            self.statusLabel.setText("Exporting...")
            self.progressBar.setVisible(True)
            self.progressBar.setValue(0)
            
            # Disable buttons during export
            self.openExportDialogButton.setEnabled(False)
            self.quickExportButton.setEnabled(False)
            
            # Perform export with progress updates
            success, message, stats = self.dxf_exporter.export_with_error_handling(config)
            
            # Hide progress and re-enable buttons
            self.progressBar.setVisible(False)
            self.openExportDialogButton.setEnabled(True)
            self._update_quick_export_button()
            
            if success:
                self.statusLabel.setText("Export completed successfully")
                QMessageBox.information(
                    self, "Export Complete",
                    f"Sewerage network exported successfully to:\n{config.output_path}\n\n{message}"
                )
                
                # Save configuration for future quick exports
                print(f"DEBUG: About to save configuration in dockwidget")
                print(f"DEBUG: config.pipes_mapping before save: {config.pipes_mapping}")
                print(f"DEBUG: config.junctions_mapping before save: {config.junctions_mapping}")
                save_result = self.configuration.save_export_configuration(config)
                print(f"DEBUG: Configuration save result: {save_result}")
                self.configuration.set_setting('last_output_path', config.output_path)
                
            else:
                self.statusLabel.setText("Export failed")
                QMessageBox.critical(
                    self, "Export Failed",
                    f"Failed to export sewerage network:\n{message}"
                )
                
        except Exception as e:
            # Hide progress and re-enable buttons
            self.progressBar.setVisible(False)
            self.openExportDialogButton.setEnabled(True)
            self._update_quick_export_button()
            
            self.statusLabel.setText("Export error")
            QgsMessageLog.logMessage(f"Export error: {e}", "RedBasica Export", Qgis.Critical)
            QMessageBox.critical(
                self, "Export Error",
                f"An unexpected error occurred during export:\n{str(e)}"
            )

    def _load_last_layer_selection(self):
        """Load last used layer selections."""
        try:
            pipes_layer_id = self.configuration.get_setting('last_pipes_layer_id', '')
            junctions_layer_id = self.configuration.get_setting('last_junctions_layer_id', '')
            
            if pipes_layer_id:
                layer = QgsProject.instance().mapLayer(pipes_layer_id)
                if layer and isinstance(layer, QgsVectorLayer):
                    self.pipesLayerCombo.setLayer(layer)
            
            if junctions_layer_id:
                layer = QgsProject.instance().mapLayer(junctions_layer_id)
                if layer and isinstance(layer, QgsVectorLayer):
                    self.junctionsLayerCombo.setLayer(layer)
                    
        except Exception:
            # If loading fails, continue with empty selection
            pass

    def _save_layer_selection(self):
        """Save current layer selections."""
        try:
            pipes_layer = self.pipesLayerCombo.currentLayer()
            junctions_layer = self.junctionsLayerCombo.currentLayer()
            
            pipes_id = pipes_layer.id() if pipes_layer else ''
            junctions_id = junctions_layer.id() if junctions_layer else ''
            
            self.configuration.set_setting('last_pipes_layer_id', pipes_id)
            self.configuration.set_setting('last_junctions_layer_id', junctions_id)
            
        except Exception:
            # If saving fails, continue silently
            pass

    def closeEvent(self, event):
        """Handle dock widget close event."""
        # Save current state
        self._save_layer_selection()
        
        # Clean up dialogs
        if self.main_export_dialog:
            self.main_export_dialog.close()
        
        self.closingPlugin.emit()
        event.accept()
