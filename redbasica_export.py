# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RedBasicaExport
                                 A QGIS plugin
 Export the sewer network designed using RedBasica to other formats
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Leonardo Nazareth
        email                : leonazareth@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import sys
import traceback

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QThread, pyqtSignal
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QProgressDialog
from qgis.core import Qgis, QgsMessageLog, QgsApplication

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .redbasica_export_dockwidget import RedBasicaExportDockWidget

# Import core modules
from .core.layer_manager import LayerManager
from .core.template_manager import TemplateManager
from .core.dxf_exporter import DXFExporter
from .core.configuration import Configuration, ExportConfiguration
from .core.i18n_manager import init_i18n, tr
from .ui.main_export_dialog import MainExportDialog


class RedBasicaExport:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # Initialize internationalization
        self.i18n_manager = init_i18n(self.plugin_dir)

        # Declare instance attributes
        self.actions = []
        self.menu = tr('&RedBasica Export')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'RedBasicaExport')
        self.toolbar.setObjectName(u'RedBasicaExport')

        # Plugin state
        self.pluginIsActive = False
        self.dockwidget = None
        
        # Core components
        self.layer_manager = None
        self.template_manager = None
        self.dxf_exporter = None
        self.configuration = None
        
        # Dialogs
        self.main_export_dialog = None
        
        # Check dependencies on initialization
        self.dependencies_ok = self._check_dependencies()


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RedBasicaExport', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/redbasica_export/icon_2.png'
        # Force icon cache refresh by explicitly creating QIcon
        from qgis.PyQt.QtGui import QIcon
        icon = QIcon(icon_path)
        if icon.isNull():
            # Fallback to file system path if resource doesn't work
            import os
            fallback_path = os.path.join(os.path.dirname(__file__), 'icon_2.png')
            icon_path = fallback_path
        self.add_action(
            icon_path,
            text=tr('Flexible Sewerage DXF Export'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        # Add action for main export dialog
        self.add_action(
            icon_path,
            text=tr('Export Sewerage Network to DXF...'),
            callback=self.show_export_dialog,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False)

    #--------------------------------------------------------------------------
    
    def _check_dependencies(self):
        """
        Check if bundled dependencies are available.
        
        Returns:
            bool: True if dependencies are available, False otherwise
        """
        try:
            # Add addon directory to Python path
            addon_path = os.path.join(self.plugin_dir, 'addon')
            if addon_path not in sys.path:
                sys.path.insert(0, addon_path)
            
            # Try to import ezdxf
            import ezdxf
            version = getattr(ezdxf, '__version__', 'unknown')
            
            # Log successful import
            QgsMessageLog.logMessage(
                f"ezdxf library loaded successfully (version: {version})",
                "RedBasica Export", Qgis.Info
            )
            
            return True
            
        except ImportError as e:
            error_msg = f"Failed to import bundled ezdxf library: {e}"
            QgsMessageLog.logMessage(error_msg, "RedBasica Export", Qgis.Critical)
            return False
        except Exception as e:
            error_msg = f"Unexpected error checking dependencies: {e}"
            QgsMessageLog.logMessage(error_msg, "RedBasica Export", Qgis.Critical)
            return False
    
    def _initialize_components(self):
        """Initialize core plugin components."""
        try:
            if not self.dependencies_ok:
                raise RuntimeError("Dependencies not available")
            
            # Initialize core components
            self.layer_manager = LayerManager()
            self.template_manager = TemplateManager()
            self.dxf_exporter = DXFExporter(self.template_manager)
            self.configuration = Configuration()
            
            QgsMessageLog.logMessage(
                "Core components initialized successfully",
                "RedBasica Export", Qgis.Info
            )
            
        except Exception as e:
            error_msg = f"Failed to initialize components: {e}"
            QgsMessageLog.logMessage(error_msg, "RedBasica Export", Qgis.Critical)
            self._show_error_message(
                "Initialization Error",
                f"Failed to initialize plugin components:\n{error_msg}\n\n"
                "Please check that all required files are present and try restarting QGIS."
            )
            raise
    
    def show_export_dialog(self):
        """Show the main export dialog."""
        try:
            # Check dependencies first
            if not self.dependencies_ok:
                self._show_error_message(
                    "Dependencies Missing",
                    "Required libraries are not available. Please reinstall the plugin."
                )
                return
            
            # Initialize components if needed
            if not self.layer_manager:
                self._initialize_components()
            
            # Create dialog if needed
            if not self.main_export_dialog:
                self.main_export_dialog = MainExportDialog(
                    layer_manager=self.layer_manager,
                    parent=self.iface.mainWindow()
                )
                self.main_export_dialog.export_requested.connect(self._handle_export_request)
            
            # Show dialog
            self.main_export_dialog.show()
            self.main_export_dialog.raise_()
            self.main_export_dialog.activateWindow()
            
        except Exception as e:
            error_msg = f"Failed to show export dialog: {e}"
            QgsMessageLog.logMessage(error_msg, "RedBasica Export", Qgis.Critical)
            self._show_error_message(
                "Dialog Error",
                f"Failed to open export dialog:\n{error_msg}"
            )
    
    def _handle_export_request(self, config_dict):
        """
        Handle export request from the main dialog.
        
        Args:
            config_dict: Dictionary containing export configuration
        """
        try:
            # Convert dict back to ExportConfiguration
            config = self.configuration._dict_to_export_config(config_dict)
            
            # Show progress dialog
            progress = QProgressDialog(
                "Exporting sewerage network to DXF...",
                "Cancel", 0, 100, self.iface.mainWindow()
            )
            progress.setWindowModality(Qt.WindowModal)
            progress.show()
            
            # Update progress
            progress.setValue(10)
            QgsApplication.processEvents()
            
            # Perform export
            success, message, stats = self.dxf_exporter.export_with_error_handling(config)
            
            progress.close()
            
            if success:
                self._show_success_message(
                    "Export Complete",
                    f"Sewerage network exported successfully to:\n{config.output_path}\n\n{message}"
                )
            else:
                self._show_error_message(
                    "Export Failed",
                    f"Failed to export sewerage network:\n{message}"
                )
                
        except Exception as e:
            error_msg = f"Export error: {e}\n\nTraceback:\n{traceback.format_exc()}"
            QgsMessageLog.logMessage(error_msg, "RedBasica Export", Qgis.Critical)
            self._show_error_message(
                "Export Error",
                f"An unexpected error occurred during export:\n{str(e)}"
            )
    
    def _show_error_message(self, title, message):
        """Show error message to user."""
        self.iface.messageBar().pushMessage(
            title, message, level=Qgis.Critical, duration=10
        )
        QMessageBox.critical(self.iface.mainWindow(), title, message)
    
    def _show_success_message(self, title, message):
        """Show success message to user."""
        self.iface.messageBar().pushMessage(
            title, message, level=Qgis.Success, duration=5
        )
        QMessageBox.information(self.iface.mainWindow(), title, message)

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING RedBasicaExport"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # Clean up dialogs
        if self.main_export_dialog:
            self.main_export_dialog.close()
            self.main_export_dialog = None

        for action in self.actions:
            self.iface.removePluginVectorMenu(
                tr('&RedBasica Export'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
        
        # Clean up components
        self.layer_manager = None
        self.template_manager = None
        self.dxf_exporter = None
        self.configuration = None

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            try:
                # Check dependencies first
                if not self.dependencies_ok:
                    self._show_error_message(
                        "Dependencies Missing",
                        "Required libraries are not available. Please reinstall the plugin."
                    )
                    return
                
                # Initialize components if needed
                if not self.layer_manager:
                    self._initialize_components()

                # dockwidget may not exist if:
                #    first run of plugin
                #    removed on close (see self.onClosePlugin method)
                if self.dockwidget == None:
                    # Create the dockwidget (after translation) and keep reference
                    self.dockwidget = RedBasicaExportDockWidget(
                        layer_manager=self.layer_manager,
                        template_manager=self.template_manager,
                        dxf_exporter=self.dxf_exporter
                    )

                # connect to provide cleanup on closing of dockwidget
                self.dockwidget.closingPlugin.connect(self.onClosePlugin)

                # show the dockwidget
                # TODO: fix to allow choice of dock location
                self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
                self.dockwidget.show()
                
            except Exception as e:
                error_msg = f"Failed to start plugin: {e}"
                QgsMessageLog.logMessage(error_msg, "RedBasica Export", Qgis.Critical)
                self._show_error_message(
                    "Plugin Startup Error",
                    f"Failed to start RedBasica Export plugin:\n{error_msg}"
                )
                self.pluginIsActive = False
